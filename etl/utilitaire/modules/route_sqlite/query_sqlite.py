# Liste contenant l'ensemble des noms des tables à créer
list_table_name = ["AUTEXERC", "ACTIVITE", "COORDACT", "COORDCORRESP", "COORDSTRUCT", "DIPLOBT", "ETATCIV", "EXERCPRO", "PERSONNE", "REFERAE", "SAVOIRFAIRE", "STRUCTURE", "INSEE_COMMUNES", "INSEE_DEPARTEMENT", "INSEE_REGION", "T_GEO_COM"]

def query_create_table(table_name):
    """
    Fonction appelée par init_empty_schema dans route_sqlite.py afin d'importer
    les query create table permettant de créer les tables au sein de la bdd.

    Paramètre :
        table_name : Nom de la table dont on souhaite connaitre 
                     la query create table. 
    """
    table_name = table_name.upper()

    if table_name == "AUTEXERC":
        query ="""CREATE TABLE IF NOT EXISTS AUTEXERC (
        TYPE_D_IDENTIFIANT_PP            TEXT, 
        IDENTIFIANT_PP                   TEXT,
        IDENTIFICATION_NATIONALE_PP      TEXT,
        DATE_EFFET_AUTORISATION          TEXT,
        CODE_TYPE_AUTORISATION           TEXT,
        LIBELLE_TYPE_AUTORISATION        TEXT,
        DATE_FIN_AUTORISATION            TEXT,
        DATE_DE_MISE_A_JOUR_AUTORISATION TEXT,
        CODE_DISCIPLINE_AUTORISATION     TEXT,
        LIBELLE_DISCIPLINE_AUTORISATION  TEXT,
        CODE_PROFESSION                  TEXT,
        LIBELLE_PROFESSION               TEXT,
        UNNAMED                          TEXT
    );"""

    elif table_name == "ACTIVITE":
        query = """CREATE TABLE IF NOT EXISTS ACTIVITE (
        TYPE_D_IDENTIFIANT_PP                    TEXT,
        IDENTIFIANT_PP                           TEXT,
        IDENTIFIANT_DE_L_ACTIVITE                TEXT,
        IDENTIFICATION_NATIONALE_PP              TEXT,
        IDENTIFIANT_TECHNIQUE_DE_LA_STRUCTURE    TEXT,
        CODE_FONCTION                            TEXT,
        LIBELLE_FONCTION                         TEXT,
        CODE_MODE_EXERCICE                       TEXT,
        LIBELLE_MODE_EXERCICE                    TEXT,
        DATE_DE_DEBUT_ACTIVITE                   TEXT,
        DATE_DE_FIN_ACTIVITE                     TEXT,
        DATE_DE_MISE_A_JOUR_ACTIVITE             TEXT,
        CODE_REGION_EXERCICE                     TEXT,
        LIBELLE_REGION_EXERCICE                  TEXT,
        CODE_GENRE_ACTIVITE                      TEXT,
        LIBELLE_GENRE_ACTIVITE                   TEXT,
        CODE_MODIF_DE_FIN_D_ACTIVITE             TEXT,
        LIBELLE_MOTIF_DE_FIN_D_ACTIVITE          TEXT,
        CODE_SECTION_TABLEAU_PHARMACIENS         TEXT,
        LIBELLE_SECTION_TABLEAU_PHARMACIENS      TEXT,
        CODE_SOUS_SECTION_TABLEAU_PHARMACIENS    TEXT,
        LIBELLE_SOUS_SECTION_TABLEAU_PHARMACIENS TEXT,
        CODE_TYPE_ACTIVITE_LIBERALE              TEXT,
        LIBELLE_TYPE_ACTIVITE_LIBERALE           TEXT,
        CODE_STATUT_DES_PS_DU_SSA                TEXT,
        LIBELLE_STATUT_DES_PS_DU_SSA             TEXT,
        CODE_STATUT_HOSPITALIER                  TEXT,
        LIBELLE_STATUT_HOSPITALIER               TEXT,
        CODE_PROFESSION                          TEXT,
        LIBELLE_PROFESSION                       TEXT,
        CODE_CATEGORIE_PROFESSIONNELLE           TEXT,
        LIBELLE_CATEGORIE_PROFESSIONNELLE        TEXT,
        UNNAMED                                  TEXT
    );"""

    elif table_name == "COORDACT":
        query = """CREATE TABLE IF NOT EXISTS COORDACT (         
        TYPE_D_IDENTIFIANT_PP                        TEXT,
        IDENTIFIANT_PP                               TEXT,
        IDENTIFIANT_DE_L_ACTIVITE                    TEXT,
        IDENTIFICATION_NATIONALE_PP                  TEXT, 
        IDENTIFIANT_TECHNIQUE_DE_LA_STRUCTURE        TEXT,
        CODE_PROFESSION                              TEXT,
        LIBELLE_PROFESSION                           TEXT,
        CODE_CATEGORIE_PROFESSIONNELLE               TEXT,
        LIBELLE_CATEGORIE_PROFESSIONNELLE            TEXT,
        COMPLEMENT_DESTINATAIRE_COORD_ACTIVITE       TEXT,
        COMPLEMENT_POINT_GEOGRAPHIQUE_COORD_ACTIVITE TEXT,
        NUMERO_VOIE_COORD_ACTIVITE                   TEXT,
        INDICE_REPETITION_VOIE_COORD_ACTIVITE        TEXT,
        CODE_TYPE_DE_VOIE_COORD_ACTIVITE             TEXT,
        LIBELLE_TYPE_DE_VOIE_COORD_ACTIVITE          TEXT,
        LIBELLE_VOIE_COORD_ACTIVITE                  TEXT,
        MENTION_DISTRIBUTION_COORD_ACTIVITE          TEXT,
        BUREAU_CEDEX_COORD_ACTIVITE                  TEXT,
        CODE_POSTAL_COORD_ACTIVITE                   TEXT,
        CODE_COMMUNE_COORD_ACTIVITE                  TEXT,
        LIBELLE_COMMUNE_COORD_ACTIVITE               TEXT,
        CODE_PAYS_COORD_ACTIVITE                     TEXT,
        LIBELLE_PAYS_COORD_ACTIVITE                  TEXT,
        TELEPHONE_COORD_ACTIVITE                     TEXT,
        TELEPHONE_2_COORD_ACTIVITE                   TEXT,
        TELECOPIE_COORD_ACTIVITE                     TEXT,
        ADRESSE_EMAIL_COORD_ACTIVITE                 TEXT,
        DATE_DE_MISE_A_JOUR_COORD_ACTIVITE           TEXT,
        DATE_DE_FIN_COORD_ACTIVITE                   TEXT,
        UNNAMED                                      TEXT
    );"""

    elif table_name == "COORDCORRESP":
        query = """CREATE TABLE IF NOT EXISTS COORDCORRESP (
        TYPE_D_IDENTIFIANT_PP                              TEXT,
        IDENTIFIANT_PP                                     TEXT,
        IDENTIFICATION_NATIONALE_PP                        TEXT,
        COMPLEMENT_DESTINATAIRE_COORD_CORRESPONDANCE       TEXT,
        COMPLEMENT_POINT_GEOGRAPHIQUE_COORD_CORRESPONDANCE TEXT,
        NUMERO_VOIE_COORD_CORRESPONDANCE                   TEXT,
        INDICE_REPETITION_VOIE_COORD_CORRESPONDANCE        TEXT,
        CODE_TYPE_DE_VOIE_COORD_CORRESPONDANCE             TEXT,
        LIBELLE_TYPE_DE_VOIE_COORD_CORRESPONDANCE          TEXT,
        LIBELLE_VOIE_COORD_CORRESPONDANCE                  TEXT,
        MENTION_DISTRIBUTION_COORD_CORRESPONDANCE          TEXT,
        BUREAU_CEDEX_COORD_CORRESPONDANCE                  TEXT,
        CODE_POSTAL_COORD_CORRESPONDANCE                   TEXT,
        CODE_COMMUNE_COORD_CORRESPONDANCE                  TEXT,
        LIBELLE_COMMUNE_COORD_CORRESPONDANCE               TEXT,
        CODE_PAYS_COORD_CORRESPONDANCE                     TEXT,
        LIBELLE_PAYS_COORD_CORRESPONDANCE                  TEXT,
        TELEPHONE_COORD_CORRESPONDANCE                     TEXT,
        TELEPHONE_2_COORD_CORRESPONDANCE                   TEXT,
        TELECOPIE_COORD_CORRESPONDANCE                     TEXT,
        ADRESSE_EMAIL_COORD_CORRESPONDANCE                 TEXT,
        DATE_DE_MISE_A_JOUR_COORD_CORRESPONDANCE           TEXT,
        DATE_DE_FIN_COORD_CORRESPONDANCE                   TEXT,
        UNNAMED                                            TEXT
    );"""

    elif table_name == "COORDSTRUCT":
        query = """CREATE TABLE IF NOT EXISTS COORDSTRUCT (
        IDENTIFIANT_TECHNIQUE_DE_LA_STRUCTURE         TEXT,
        COMPLEMENT_DESTINATAIRE_COORD_STRUCTURE       TEXT,
        COMPLEMENT_POINT_GEOGRAPHIQUE_COORD_STRUCTURE TEXT,
        NUMERO_VOIE_COORD_STRUCTURE                   TEXT,
        INDICE_REPETITION_VOIE_COORD_STRUCTURE        TEXT,
        CODE_TYPE_DE_VOIE_COORD_STRUCTURE             TEXT,
        LIBELLE_TYPE_DE_VOIE_COORD_STRUCTURE          TEXT,
        LIBELLE_VOIE_COORD_STRUCTURE                  TEXT,
        MENTION_DISTRIBUTION_COORD_STRUCTURE          TEXT,
        BUREAU_CEDEX_COORD_STRUCTURE                  TEXT,
        CODE_POSTAL_COORD_STRUCTURE                   TEXT,
        CODE_COMMUNE_COORD_STRUCTURE                  TEXT,
        LIBELLE_COMMUNE_COORD_STRUCTURE               TEXT,
        CODE_PAYS_COORD_STRUCTURE                     TEXT,
        LIBELLE_PAYS_COORD_STRUCTURE                  TEXT,
        TELEPHONE_COORD_STRUCTURE                     TEXT,
        TELEPHONE_2_COORD_STRUCTURE                   TEXT,
        TELECOPIE_COORD_STRUCTURE                     TEXT,
        ADRESSE_EMAIL_COORD_STRUCTURE                 TEXT,
        DATE_DE_MISE_A_JOUR_COORD_STRUCTURE           TEXT,
        DATE_DE_FIN_COORD_STRUCTURE                   TEXT,
        UNNAMED                                       TEXT
    );"""

    elif table_name == "DIPLOBT":
        query = """CREATE TABLE IF NOT EXISTS DIPLOBT (
        TYPE_D_IDENTIFIANT_PP              TEXT,
        IDENTIFIANT_PP                     TEXT,
        IDENTIFICATION_NATIONALE_PP        TEXT,
        CODE_TYPE_DIPLOME_OBTENU           TEXT,
        LIBELLE_TYPE_DIPLOME_OBTENU        TEXT,
        CODE_DIPLOME_OBTENU                TEXT,
        LIBELLE_DIPLOME_OBTENU             TEXT,
        DATE_DE_MISE_A_JOUR_DIPLOME_OBTENU TEXT,
        CODE_LIEU_OBTENTION                TEXT,
        LIBELLE_LIEU_OBTENTION             TEXT,
        DATE_D_OBTENTION_DIPLOME           TEXT,
        NUMERO_DIPLOME                     TEXT,
        UNNAMED                            TEXT
    );"""

    elif table_name == "ETATCIV":
        query = """CREATE TABLE IF NOT EXISTS ETATCIV (
        TYPE_D_IDENTIFIANT_PP          TEXT,
        IDENTIFIANT_PP                 TEXT,
        IDENTIFICATION_NATIONALE_PP    TEXT,
        CODE_STATUT_ETAT_CIVIL         TEXT,
        LIBELLE_STATUT_ETAT_CIVIL      TEXT,
        CODE_SEXE                      TEXT,
        LIBELLE_SEXE                   TEXT,
        NOM_DE_FAMILLE                 TEXT,
        PRENOMS                        TEXT,
        DATE_DE_NAISSANCE              TEXT,
        LIEU_DE_NAISSANCE              TEXT,
        DATE_DE_DECES                  TEXT,
        DATE_D_EFFET_DE_L_ETAT_CIVIL   TEXT,
        CODE_COMMUNE_DE_NAISSANCE      TEXT,
        LIBELLE_COMMUNE_DE_NAISSANCE   TEXT,
        CODE_PAYS_DE_NAISSANCE         TEXT,
        LIBELLE_PAYS_DE_NAISSANCE      TEXT,
        DATE_DE_MISE_A_JOUR_ETAT_CIVIL TEXT,
        UNNAMED                        TEXT
    );"""

    elif table_name == "EXERCPRO":
        query = """CREATE TABLE IF NOT EXISTS EXERCPRO (
        TYPE_D_IDENTIFIANT_PP              TEXT,
        IDENTIFIANT_PP                     TEXT,
        IDENTIFICATION_NATIONALE_PP        TEXT,
        CODE_CIVILITE_D_EXERCICE           TEXT,
        LIBELLE_CIVILITE_D_EXERCICE        TEXT,
        NOM_D_EXERCICE                     TEXT,
        PRENOM_D_EXERCICE                  TEXT,
        CODE_PROFESSION                    TEXT,
        LIBELLE_PROFESSION                 TEXT,
        CODE_CATEGORIE_PROFESSIONNELLE     TEXT,
        LIBELLE_CATEGORIE_PROFESSIONNELLE  TEXT,
        DATE_DE_FIN_EXERCICE               TEXT,
        DATE_DE_MISE_A_JOUR_EXERCICE       TEXT,
        DATE_EFFET_EXERCICE                TEXT,
        CODE_AE_1E_INSCRIPTION             TEXT,
        LIBELLE_AE_1E_INSCRIPTION          TEXT,
        DATE_DEBUT_1E_INSCRIPTION          TEXT,
        DEPARTEMENT_1E_INSCRIPTION         TEXT,
        LIBELLE_DEPARTEMENT_1E_INSCRIPTION TEXT,
        UNNAMED                            TEXT
    );"""

    elif table_name == "PERSONNE":
        query = """CREATE TABLE IF NOT EXISTS PERSONNE (
        TYPE_D_IDENTIFIANT_PP        TEXT,
        IDENTIFIANT_PP               TEXT,
        IDENTIFICATION_NATIONALE_PP  TEXT,
        CODE_CIVILITE                TEXT,
        LIBELLE_CIVILITE             TEXT,
        NOM_D_USAGE                  TEXT,
        PRENOM_D_USAGE               TEXT,
        NATURE                       TEXT,
        DATE_D_EFFET                 TEXT,
        DATE_DE_MISE_A_JOUR_PERSONNE TEXT
    );"""

    elif table_name == "REFERAE":
        query = """CREATE TABLE IF NOT EXISTS REFERAE (
        TYPE_D_IDENTIFIANT_PP             TEXT,
        IDENTIFIANT_PP                    TEXT,
        IDENTIFICATION_NATIONALE_PP       TEXT,
        CODE_AE                           TEXT,
        LIBELLE_AE                        TEXT,
        DATE_DEBUT_INSCRIPTION            TEXT,
        DATE_FIN_INSCRIPTION              TEXT,
        DATE_DE_MISE_A_JOUR_INSCRIPTION   TEXT,
        CODE_STATUT_INSCRIPTION           TEXT,
        LIBELLE_STATUT_INSCRIPTION        TEXT,
        CODE_DEPARTEMENT_INSCRIPTION      TEXT,
        LIBELLE_DEPARTEMENT_INSCRIPTION   TEXT,
        CODE_DEPARTEMENT_ACCUEIL          TEXT,
        LIBELLE_DEPARTEMENT_ACCUEIL       TEXT,
        CODE_PROFESSION                   TEXT,
        LIBELLE_PROFESSION                TEXT,
        CODE_CATEGORIE_PROFESSIONNELLE    TEXT,
        LIBELLE_CATEGORIE_PROFESSIONNELLE TEXT,
        UNNAMED                           TEXT
    );"""

    elif table_name == "SAVOIRFAIRE":
        query = """CREATE TABLE IF NOT EXISTS SAVOIRFAIRE (
        TYPE_D_IDENTIFIANT_PP             TEXT,
        IDENTIFIANT_PP                    TEXT,
        IDENTIFICATION_NATIONALE_PP       TEXT,
        CODE_SAVOIR_FAIRE                 TEXT,
        LIBELLE_SAVOIR_FAIRE              TEXT,
        CODE_TYPE_SAVOIR_FAIRE            TEXT,
        LIBELLE_TYPE_SAVOIR_FAIRE         TEXT,
        CODE_PROFESSION                   TEXT,
        LIBELLE_PROFESSION                TEXT,
        CODE_CATEGORIE_PROFESSIONNELLE    TEXT,
        LIBELLE_CATEGORIE_PROFESSIONNELLE TEXT,
        DATE_RECONNAISSANCE_SAVOIR_FAIRE  TEXT,
        DATE_DE_MISE_A_JOUR_SAVOIR_FAIRE  TEXT,
        DATE_ABANDON_SAVOIR_FAIRE         TEXT,
        UNNAMED                           TEXT
    );"""

    elif table_name == "STRUCTURE":
        query = """CREATE TABLE IF NOT EXISTS STRUCTURE (
        TYPE_DE_STRUCTURE                        TEXT,
        IDENTIFIANT_TECHNIQUE_DE_LA_STRUCTURE    TEXT,
        IDENTIFICATION_NATIONALE_DE_LA_STRUCTURE TEXT,
        NUMERO_SIRET                             TEXT,
        NUMERO_SIREN                             TEXT,
        NUMERO_FINESS_ETABLISSEMENT              TEXT,
        NUMERO_FINESS_EJ                         TEXT,
        RPPS_RANG                                TEXT,
        DATE_DE_FERMETURE_STRUCTURE              TEXT,
        DATE_DE_MISE_A_JOUR_STRUCTURE            TEXT,
        CODE_CATEGORIE_JURIDIQUE                 TEXT,
        LIBELLE_CATEGORIE_JURIDIQUE              TEXT,
        CODE_SECTEUR_D_ACTIVITE                  TEXT,
        LIBELLE_SECTEUR_D_ACTIVITE               TEXT,
        RAISON_SOCIALE                           TEXT,
        ENSEIGNE_COMMERCIALE                     TEXT,
        UNNAMED                                  TEXT
    );"""

    elif table_name == "INSEE_COMMUNES":
        query = """CREATE TABLE IF NOT EXISTS INSEE_COMMUNES (
        TYPECOM   TEXT,
        COM       TEXT,
        REG       TEXT,
        DEP       TEXT,
        ARR       TEXT,
        TNCC      TEXT,
        NCC       TEXT,
        NCCENR    TEXT,
        LIBELLE   TEXT,
        CAN       TEXT,
        COMPARENT TEXT,
        UNNAMED   TEXT
    );"""

    elif table_name == "INSEE_DEPARTEMENT":
        query = """CREATE TABLE IF NOT EXISTS INSEE_DEPARTEMENT (
        DEP      TEXT,
        REG      TEXT,
        CHEFLIEU TEXT,
        TNCC     TEXT,
        NCC      TEXT,
        NCCENR   TEXT,
        LIBELLE  TEXT
    );"""

    elif table_name == "INSEE_REGION":
        query = """CREATE TABLE IF NOT EXISTS INSEE_REGION (
        REG      TEXT,
        CHEFLIEU TEXT,
        TNCC     TEXT,
        NCC      TEXT,
        NCCENR   TEXT,
        LIBELLE  TEXT
    );"""

    elif table_name == "T_GEO_COM":
        query = """CREATE TABLE IF NOT EXISTS T_GEO_COM (
	Column1 INTEGER,
	"source" VARCHAR(64),
	date_maj VARCHAR(16),
	COM_CODE TEXT(1),
	COM_LIB VARCHAR(32),
	COM_TYPE VARCHAR(4),
	COM_STATUT VARCHAR(8),
	COM_HISTOMAJ VARCHAR(64),
	METOMER_CODE VARCHAR(4),
	METOMER_LIB VARCHAR(16),
	COM10_CODE TEXT(1),
	COM10_LIB VARCHAR(32),
	COM11_CODE TEXT(1),
	COM11_LIB VARCHAR(32),
	COM12_CODE TEXT(1),
	COM12_LIB VARCHAR(32),
	COM13_CODE TEXT(1),
	COM13_LIB VARCHAR(32),
	COM14_CODE TEXT(1),
	COM14_LIB VARCHAR(32),
	COM15_CODE TEXT(1),
	COM15_LIB VARCHAR(32),
	COM16_CODE TEXT(1),
	COM16_LIB VARCHAR(32),
	COM17_CODE TEXT(1),
	COM17_LIB VARCHAR(32),
	COM18_CODE TEXT(1),
	COM18_LIB VARCHAR(32),
	COM19_CODE TEXT(1),
	COM19_LIB VARCHAR(32),
	COM20_CODE TEXT(1),
	COM20_LIB VARCHAR(32),
	COM21_CODE TEXT(1),
	COM21_LIB VARCHAR(32),
	COM22_CODE TEXT(1),
	COM22_LIB VARCHAR(32),
	CV17_CODE TEXT(1),
	CV17_LIB VARCHAR(32),
	CV18_CODE TEXT(1),
	CV18_LIB VARCHAR(32),
	CV19_CODE TEXT(1),
	CV19_LIB VARCHAR(32),
	CV19_TYPE VARCHAR(1),
	CV20_CODE TEXT(1),
	CV20_LIB VARCHAR(32),
	CV20_TYPE VARCHAR(1),
	CV21_CODE TEXT(1),
	CV21_LIB VARCHAR(32),
	CV21_TYPE VARCHAR(1),
	CV22_CODE TEXT(1),
	CV22_LIB VARCHAR(32),
	CV22_TYPE VARCHAR(1),
	ARR17_CODE TEXT(1),
	ARR17_LIB VARCHAR(16),
	ARR18_CODE TEXT(1),
	ARR18_LIB VARCHAR(16),
	ARR19_CODE TEXT(1),
	ARR19_LIB VARCHAR(16),
	ARR20_CODE TEXT(1),
	ARR20_LIB VARCHAR(16),
	ARR21_CODE TEXT(1),
	ARR21_LIB VARCHAR(16),
	ARR22_CODE TEXT(1),
	ARR22_LIB VARCHAR(16),
	DPT17_CODE TEXT(1),
	DPT17_LIB VARCHAR(8),
	DPT18_CODE TEXT(1),
	DPT18_LIB VARCHAR(8),
	DPT19_CODE TEXT(1),
	DPT19_LIB VARCHAR(8),
	DPT20_CODE TEXT(1),
	DPT20_LIB VARCHAR(8),
	DPT21_CODE TEXT(1),
	DPT21_LIB VARCHAR(8),
	DPT22_CODE TEXT(1),
	DPT22_LIB VARCHAR(8),
	REG17_CODE TEXT(1),
	REG17_LIB VARCHAR(32),
	REG18_CODE TEXT(1),
	REG18_LIB VARCHAR(32),
	REG19_CODE TEXT(1),
	REG19_LIB VARCHAR(32),
	REG20_CODE TEXT(1),
	REG20_LIB VARCHAR(32),
	REG21_CODE TEXT(1),
	REG21_LIB VARCHAR(32),
	REG22_CODE TEXT(1),
	REG22_LIB VARCHAR(32),
	CODGEO TEXT(1),
	ZRR_SIMP VARCHAR(64),
	ZRR_CODE VARCHAR(2),
	ZRR_LIB VARCHAR(64),
	ZRR_DATE VARCHAR(16),
	TDD22_CODE TEXT(1),
	TDD22_LIB VARCHAR(64),
	ZE20_V2020_CODE TEXT(1),
	ZE20_V2020_LIB VARCHAR(32),
	ZE20_V2021_CODE TEXT(1),
	ZE20_V2021_LIB VARCHAR(32),
	ZE20_V2022_CODE TEXT(1),
	ZE20_V2022_LIB VARCHAR(32),
	UU20_V2020_CODE TEXT(1),
	UU20_V2020_LIB VARCHAR(64),
	UU20_V2021_CODE TEXT(1),
	UU20_V2021_LIB VARCHAR(64),
	UU20_V2022_CODE TEXT(1),
	UU20_V2022_LIB VARCHAR(64),
	AAV20_V2020_CODE VARCHAR(4),
	AAV20_V2020_LIB VARCHAR(64),
	AAV20_V2021_CODE VARCHAR(4),
	AAV20_V2021_LIB VARCHAR(64),
	AAV20_V2022_CODE VARCHAR(4),
	AAV20_V2022_LIB VARCHAR(64),
	BV12_V2017_CODE TEXT(1),
	BV12_V2017_LIB VARCHAR(64),
	BV12_V2018_CODE TEXT(1),
	BV12_V2018_LIB VARCHAR(64),
	BV12_V2019_CODE TEXT(1),
	BV12_V2019_LIB VARCHAR(64),
	BV12_V2020_CODE TEXT(1),
	BV12_V2020_LIB VARCHAR(64),
	BV12_V2021_CODE TEXT(1),
	BV12_V2021_LIB VARCHAR(64),
	BV12_V2022_CODE TEXT(1),
	BV12_V2022_LIB VARCHAR(64),
	EPCI17_CODE TEXT(1),
	EPCI17_NATURE VARCHAR(2),
	EPCI17_LIB VARCHAR(64),
	EPCI18_CODE TEXT(1),
	EPCI18_NATURE VARCHAR(2),
	EPCI18_LIB VARCHAR(64),
	EPCI19_CODE TEXT(1),
	EPCI19_NATURE VARCHAR(2),
	EPCI19_LIB VARCHAR(64),
	EPCI20_CODE TEXT(1),
	EPCI20_NATURE VARCHAR(2),
	EPCI20_LIB VARCHAR(64),
	EPCI21_CODE TEXT(1),
	EPCI21_NATURE VARCHAR(2),
	EPCI21_LIB VARCHAR(64),
	EPCI22_CODE TEXT(1),
	EPCI22_NATURE VARCHAR(2),
	EPCI22_LIB VARCHAR(64),
	TDS16_V2017_CODE VARCHAR(16),
	TDS16_V2017_LIB VARCHAR(32),
	TDS16_V2017_SOURCE VARCHAR(32),
	TDS16_V2018_CODE VARCHAR(16),
	TDS16_V2018_LIB VARCHAR(32),
	TDS16_V2018_SOURCE VARCHAR(32),
	TDS16_V2019_CODE VARCHAR(16),
	TDS16_V2019_LIB VARCHAR(32),
	TDS16_V2019_SOURCE VARCHAR(32),
	TDS16_V2020_CODE VARCHAR(16),
	TDS16_V2020_LIB VARCHAR(32),
	TDS16_V2020_SOURCE VARCHAR(32),
	TDS16_V2021_CODE VARCHAR(16),
	TDS16_V2021_LIB VARCHAR(32),
	TDS16_V2021_SOURCE VARCHAR(32),
	TDS16_V2022_CODE VARCHAR(16),
	TDS16_V2022_LIB VARCHAR(32),
	TDS16_V2022_SOURCE VARCHAR(32),
	TVS_CODE TEXT(1),
	TVS_LIB VARCHAR(32),
	TVS_INTERREGIONAL VARCHAR(4),
	TVS_ZMED VARCHAR(4),
	TVS_SOURCE VARCHAR(32),
	TVS_DATE_MAJ VARCHAR(16),
	PMSI17_CODE VARCHAR(8),
	PMSI17_LIB VARCHAR(512),
	PMSI17_LIB_COURT VARCHAR(64),
	PMSI17_POLE_CODE INTEGER,
	PMSI17_POLE_LIB VARCHAR(32),
	PMSI18_CODE VARCHAR(8),
	PMSI18_LIB VARCHAR(512),
	PMSI18_LIB_COURT VARCHAR(64),
	PMSI18_POLE_CODE TEXT(1),
	PMSI18_POLE_LIB VARCHAR(32),
	PMSI19_CODE VARCHAR(8),
	PMSI19_LIB VARCHAR(512),
	PMSI19_LIB_COURT VARCHAR(64),
	PMSI19_POLE_CODE TEXT(1),
	PMSI19_POLE_LIB VARCHAR(32),
	PMSI20_CODE VARCHAR(8),
	PMSI20_LIB VARCHAR(512),
	PMSI20_LIB_COURT VARCHAR(64),
	PMSI20_POLE_CODE TEXT(1),
	PMSI20_POLE_LIB VARCHAR(32),
	PMSI21_CODE VARCHAR(8),
	PMSI21_LIB VARCHAR(512),
	PMSI21_LIB_COURT VARCHAR(64),
	PMSI21_POLE_CODE TEXT(1),
	PMSI21_POLE_LIB VARCHAR(32),
	PMSI22_CODE VARCHAR(8),
	PMSI22_LIB VARCHAR(512),
	PMSI22_LIB_COURT VARCHAR(64),
	PMSI22_POLE_CODE TEXT(1),
        PMSI22_POLE_LIB VARCHAR(32)
    );"""
 
    else:
        print(" --- Table inconnue --- ")
    return query


def query_drop_index():
    query = """DROP INDEX IF EXISTS ACTIVITE_IDENTIFIANT_PP;
    DROP INDEX IF EXISTS ACTIVITE_IDENTIFIANT_DE_L_ACTIVITE;
    DROP INDEX IF EXISTS AUTORISATION_EXERCICE_IDENTIFIANT_PP;
    DROP INDEX IF EXISTS COORDONNEES_ACTIVITE_IDENTIFIANT_DE_L_ACTIVITE;        
    DROP INDEX IF EXISTS COORDONNEES_CORRESPONDANCE_IDENTIFIANT_PP;
    DROP INDEX IF EXISTS COORDONNEES_STRUCTURE_IDENTIFIANT_TECHNIQUE_DE_LA_STRUCTURE;
    DROP INDEX IF EXISTS DIPLOME_OBTENU_IDENTIFIANT_PP;
    DROP INDEX IF EXISTS ETAT_CIVIL_IDENTIFIANT_PP;
    DROP INDEX IF EXISTS EXERCICE_PROFESSIONNEL_IDENTIFIANT_PP;
    DROP INDEX IF EXISTS INSCRIPTION_ORDRE_IDENTIFIANT_PP;
    DROP INDEX IF EXISTS PERSONNE_IDENTIFIANT_PP;
    DROP INDEX IF EXISTS SAVOIR_FAIRE_IDENTIFIANT_PP;
    DROP INDEX IF EXISTS STRUCTURE_ACTIVITE_IDENTIFIANT_TECHNIQUE_DE_LA_STRUCTURE;"""
    return query


# Test create index
def query_create_index():
    query_create = ["CREATE INDEX ACTIVITE_IDENTIFIANT_PP on ACTIVITE(IDENTIFIANT_PP);", "CREATE INDEX ACTIVITE_IDENTIFIANT_DE_L_ACTIVITE on ACTIVITE(IDENTIFIANT_DE_L_ACTIVITE);", "CREATE INDEX AUTORISATION_EXERCICE_IDENTIFIANT_PP on AUTEXERC(IDENTIFIANT_PP);", "CREATE INDEX COORDONNEES_ACTIVITE_IDENTIFIANT_DE_L_ACTIVITE on COORDACT(IDENTIFIANT_DE_L_ACTIVITE);", "CREATE INDEX COORDONNEES_CORRESPONDANCE_IDENTIFIANT_PP on COORDCORRESP(IDENTIFIANT_PP);", "CREATE INDEX COORDONNEES_STRUCTURE_IDENTIFIANT_TECHNIQUE_DE_LA_STRUCTURE on COORDSTRUCT(IDENTIFIANT_TECHNIQUE_DE_LA_STRUCTURE);", "CREATE INDEX DIPLOME_OBTENU_IDENTIFIANT_PP on DIPLOBT(IDENTIFIANT_PP);", "CREATE INDEX ETAT_CIVIL_IDENTIFIANT_PP on ETATCIV(IDENTIFIANT_PP);", "CREATE INDEX EXERCICE_PROFESSIONNEL_IDENTIFIANT_PP on EXERCPRO(IDENTIFIANT_PP);", "CREATE INDEX INSCRIPTION_ORDRE_IDENTIFIANT_PP on REFERAE(IDENTIFIANT_PP);", "CREATE INDEX PERSONNE_IDENTIFIANT_PP on PERSONNE(IDENTIFIANT_PP);", "CREATE INDEX SAVOIR_FAIRE_IDENTIFIANT_PP on SAVOIRFAIRE(IDENTIFIANT_PP);", "CREATE INDEX STRUCTURE_ACTIVITE_IDENTIFIANT_TECHNIQUE_DE_LA_STRUCTURE on STRUCTURE(IDENTIFIANT_TECHNIQUE_DE_LA_STRUCTURE);"]
    return query_create


# Récupération du nom des colonnes et de la table à compléter
def get_column_and_table_names_for_insee(files):             
    """
    Fonction appelée dans insert_data_from_insee afin de récupérer le nom de 
    la table et des colonnes cibles.
    """
    if files[:7] == "commune":
        table_name = "INSEE_COMMUNES"
        column_names = (
        'TYPECOM',      
        'COM',          
        'REG', 
        'DEP',
        'ARR',
        'TNCC',
        'NCC',
        'NCCENR',
        'LIBELLE',
        'CAN',
        'COMPARENT',
        'UNNAMED'
        )
    elif files[:11] == "departement":
        table_name = "INSEE_DEPARTEMENT"
        column_names = (
        'DEP',
        'REG',
        'CHEFLIEU',
        'TNCC',
        'NCC',
        'NCCENR',
        'LIBELLE'
        )
    elif files[:6] == "region":
        table_name = "INSEE_REGION"
        column_names = (
        'REG',
        'CHEFLIEU',
        'TNCC',
        'NCC',
        'NCCENR',
        'LIBELLE'
        )
    elif files[:9] == "T_GEO_COM":
        table_name = "T_GEO_COM"
        column_names = (
        'Column1',
        'source',
        'date_maj',
        'COM_CODE',
        'COM_LIB',
        'COM_TYPE',
        'COM_STATUT',
        'COM_HISTOMAJ',
        'METOMER_CODE',
        'METOMER_LIB',
        'COM10_CODE',
        'COM10_LIB',
        'COM11_CODE',
        'COM11_LIB',
        'COM12_CODE',
        'COM12_LIB',
        'COM13_CODE',
        'COM13_LIB',
        'COM14_CODE',
        'COM14_LIB',
        'COM15_CODE',
        'COM15_LIB',
        'COM16_CODE',
        'COM16_LIB',
        'COM17_CODE',
        'COM17_LIB',
        'COM18_CODE',
        'COM18_LIB',
        'COM19_CODE',
        'COM19_LIB',
        'COM20_CODE',
        'COM20_LIB',
        'COM21_CODE',
        'COM21_LIB',
        'COM22_CODE',
        'COM22_LIB',
        'CV17_CODE',
        'CV17_LIB',
        'CV18_CODE',
        'CV18_LIB',
        'CV19_CODE',
        'CV19_LIB',
        'CV19_TYPE',
        'CV20_CODE',
        'CV20_LIB',
        'CV20_TYPE',
        'CV21_CODE',
        'CV21_LIB',
        'CV21_TYPE',
        'CV22_CODE',
        'CV22_LIB',
        'CV22_TYPE',
        'ARR17_CODE',
        'ARR17_LIB',
        'ARR18_CODE',
        'ARR18_LIB',
        'ARR19_CODE',
        'ARR19_LIB',
        'ARR20_CODE',
        'ARR20_LIB',
        'ARR21_CODE',
        'ARR21_LIB',
        'ARR22_CODE',
        'ARR22_LIB',
        'DPT17_CODE',
        'DPT17_LIB',
        'DPT18_CODE',
        'DPT18_LIB',
        'DPT19_CODE',
        'DPT19_LIB',
        'DPT20_CODE',
        'DPT20_LIB',
        'DPT21_CODE',
        'DPT21_LIB',
        'DPT22_CODE',
        'DPT22_LIB',
        'REG17_CODE',
        'REG17_LIB',
        'REG18_CODE',
        'REG18_LIB',
        'REG19_CODE',
        'REG19_LIB',
        'REG20_CODE',
        'REG20_LIB',
        'REG21_CODE',
        'REG21_LIB',
        'REG22_CODE',
        'REG22_LIB',
        'CODGEO',
        'ZRR_SIMP',
        'ZRR_CODE',
        'ZRR_LIB',
        'ZRR_DATE',
        'TDD22_CODE',
        'TDD22_LIB',
        'ZE20_V2020_CODE',
        'ZE20_V2020_LIB',
        'ZE20_V2021_CODE',
        'ZE20_V2021_LIB',
        'ZE20_V2022_CODE',
        'ZE20_V2022_LIB',
        'UU20_V2020_CODE',
        'UU20_V2020_LIB',
        'UU20_V2021_CODE',
        'UU20_V2021_LIB',
        'UU20_V2022_CODE',
        'UU20_V2022_LIB',
        'AAV20_V2020_CODE',
        'AAV20_V2020_LIB',
        'AAV20_V2021_CODE',
        'AAV20_V2021_LIB',
        'AAV20_V2022_CODE',
        'AAV20_V2022_LIB',
        'BV12_V2017_CODE',
        'BV12_V2017_LIB',
        'BV12_V2018_CODE',
        'BV12_V2018_LIB',
        'BV12_V2019_CODE',
        'BV12_V2019_LIB',
        'BV12_V2020_CODE',
        'BV12_V2020_LIB',
        'BV12_V2021_CODE',
        'BV12_V2021_LIB',
        'BV12_V2022_CODE',
        'BV12_V2022_LIB',
        'EPCI17_CODE',
        'EPCI17_NATURE',
        'EPCI17_LIB',
        'EPCI18_CODE',
        'EPCI18_NATURE',
        'EPCI18_LIB',
        'EPCI19_CODE',
        'EPCI19_NATURE',
        'EPCI19_LIB',
        'EPCI20_CODE',
        'EPCI20_NATURE',
        'EPCI20_LIB',
        'EPCI21_CODE',
        'EPCI21_NATURE',
        'EPCI21_LIB',
        'EPCI22_CODE',
        'EPCI22_NATURE',
        'EPCI22_LIB',
        'TDS16_V2017_CODE',
        'TDS16_V2017_LIB',
        'TDS16_V2017_SOURCE',
        'TDS16_V2018_CODE',
        'TDS16_V2018_LIB',
        'TDS16_V2018_SOURCE',
        'TDS16_V2019_CODE',
        'TDS16_V2019_LIB',
        'TDS16_V2019_SOURCE',
        'TDS16_V2020_CODE',
        'TDS16_V2020_LIB',
        'TDS16_V2020_SOURCE',
        'TDS16_V2021_CODE',
        'TDS16_V2021_LIB',
        'TDS16_V2021_SOURCE',
        'TDS16_V2022_CODE',
        'TDS16_V2022_LIB',
        'TDS16_V2022_SOURCE',
        'TVS_CODE',
        'TVS_LIB',
        'TVS_INTERREGIONAL',
        'TVS_ZMED',
        'TVS_SOURCE',
        'TVS_DATE_MAJ',
        'PMSI17_CODE',
        'PMSI17_LIB',
        'PMSI17_LIB_COURT',
        'PMSI17_POLE_CODE',
        'PMSI17_POLE_LIB',
        'PMSI18_CODE',
        'PMSI18_LIB',
        'PMSI18_LIB_COURT',
        'PMSI18_POLE_CODE',
        'PMSI18_POLE_LIB',
        'PMSI19_CODE',
        'PMSI19_LIB',
        'PMSI19_LIB_COURT',
        'PMSI19_POLE_CODE',
        'PMSI19_POLE_LIB',
        'PMSI20_CODE',
        'PMSI20_LIB',
        'PMSI20_LIB_COURT',
        'PMSI20_POLE_CODE',
        'PMSI20_POLE_LIB',
        'PMSI21_CODE',
        'PMSI21_LIB',
        'PMSI21_LIB_COURT',
        'PMSI21_POLE_CODE',
        'PMSI21_POLE_LIB',
        'PMSI22_CODE',
        'PMSI22_LIB',
        'PMSI22_LIB_COURT',
        'PMSI22_POLE_CODE',
        'PMSI22_POLE_LIB'
        )

    return column_names, table_name


# Récupération du nom des colonnes
def get_column_and_table_names_for_source_files(files):
    """
    Fonction appelée dans insert_data_from_source_files afin de récupérer le nom de la table et des colonnes 
    cible.
    """
    file_name = files[24:-4:].upper()

    if file_name == "PERSONNE":
        column_names = (
        'TYPE_D_IDENTIFIANT_PP',
        'IDENTIFIANT_PP',
        'IDENTIFICATION_NATIONALE_PP',
        'CODE_CIVILITE',
        'LIBELLE_CIVILITE',
        'NOM_D_USAGE',
        'PRENOM_D_USAGE',
        'NATURE',
        'DATE_D_EFFET',
        'DATE_DE_MISE_A_JOUR_PERSONNE')
    elif file_name == "AUTEXERC":
        column_names = (
        'TYPE_D_IDENTIFIANT_PP',
        'IDENTIFIANT_PP',
        'IDENTIFICATION_NATIONALE_PP',
        'DATE_EFFET_AUTORISATION',
        'CODE_TYPE_AUTORISATION',
        'LIBELLE_TYPE_AUTORISATION',
        'DATE_FIN_AUTORISATION',
        'DATE_DE_MISE_A_JOUR_AUTORISATION',
        'CODE_DISCIPLINE_AUTORISATION',
        'LIBELLE_DISCIPLINE_AUTORISATION',
        'CODE_PROFESSION',
        'LIBELLE_PROFESSION',
        'UNNAMED'
        )
    elif file_name == "ACTIVITE":
        column_names = (
        'TYPE_D_IDENTIFIANT_PP',
        'IDENTIFIANT_PP',
        'IDENTIFIANT_DE_L_ACTIVITE',
        'IDENTIFICATION_NATIONALE_PP',
        'IDENTIFIANT_TECHNIQUE_DE_LA_STRUCTURE',
        'CODE_FONCTION',
        'LIBELLE_FONCTION',
        'CODE_MODE_EXERCICE',
        'LIBELLE_MODE_EXERCICE',
        'DATE_DE_DEBUT_ACTIVITE',
        'DATE_DE_FIN_ACTIVITE',
        'DATE_DE_MISE_A_JOUR_ACTIVITE',
        'CODE_REGION_EXERCICE',
        'LIBELLE_REGION_EXERCICE',
        'CODE_GENRE_ACTIVITE',
        'LIBELLE_GENRE_ACTIVITE',
        'CODE_MOTIF_DE_FIN_D_ACTIVITE',
        'LIBELLE_MOTIF_DE_FIN_D_ACTIVITE',
        'CODE_SECTION_TABLEAU_PHARMACIENS',
        'LIBELLE_SECTION_TABLEAU_PHARMACIENS',
        'CODE_SOUS_SECTION_TABLEAU_PHARMACIENS',
        'LIBELLE_SOUS_SECTION_TABLEAU_PHARMACIENS',
        'CODE_TYPE_ACTIVITE_LIBERALE',
        'LIBELLE_TYPE_ACTIVITE_LIBERALE',
        'CODE_STATUT_DES_PS_DU_SSA',
        'LIBELLE_STATUT_DES_PS_DU_SSA',
        'CODE_STATUT_HOSPITALIER',
        'LIBELLE_STATUT_HOSPITALIER',
        'CODE_PROFESSION',
        'LIBELLE_PROFESSION',
        'CODE_CATEGORIE_PROFESSIONNELLE',
        'LIBELLE_CATEGORIE_PROFESSIONNELLE',
        'UNNAMED'
        )
    elif file_name == "COORDACT":
        column_names = (
        'TYPE_D_IDENTIFIANT_PP',
        'IDENTIFIANT_PP',
        'IDENTIFIANT_DE_L_ACTIVITE',
        'IDENTIFICATION_NATIONALE_PP',
        'IDENTIFIANT_TECHNIQUE_DE_LA_STRUCTURE',
        'CODE_PROFESSION',
        'LIBELLE_PROFESSION',
        'CODE_CATEGORIE_PROFESSIONNELLE',
        'LIBELLE_CATEGORIE_PROFESSIONNELLE',
        'COMPLEMENT_DESTINATAIRE_COORD_ACTIVITE',
        'COMPLEMENT_POINT_GEOGRAPHIQUE_COORD_ACTIVITE',
        'NUMERO_VOIE_COORD_ACTIVITE',
        'INDICE_REPETITION_VOIE_COORD_ACTIVITE',
        'CODE_TYPE_DE_VOIE_COORD_ACTIVITE',
        'LIBELLE_TYPE_DE_VOIE_COORD_ACTIVITE',
        'LIBELLE_VOIE_COORD_ACTIVITE',
        'MENTION_DISTRIBUTION_COORD_ACTIVITE',
        'BUREAU_CEDEX_COORD_ACTIVITE',
        'CODE_POSTAL_COORD_ACTIVITE',
        'CODE_COMMUNE_COORD_ACTIVITE',
        'LIBELLE_COMMUNE_COORD_ACTIVITE',
        'CODE_PAYS_COORD_ACTIVITE',
        'LIBELLE_PAYS_COORD_ACTIVITE',
        'TELEPHONE_COORD_ACTIVITE',
        'TELEPHONE_2_COORD_ACTIVITE',
        'TELECOPIE_COORD_ACTIVITE',
        'ADRESSE_EMAIL_COORD_ACTIVITE',
        'DATE_DE_MISE_A_JOUR_COORD_ACTIVITE',
        'DATE_DE_FIN_COORD_ACTIVITE',
        'UNNAMED'
        )
    elif file_name == "COORDCORRESP":
        column_names = (
        'TYPE_D_IDENTIFIANT_PP',
        'IDENTIFIANT_PP',
        'IDENTIFICATION_NATIONALE_PP',
        'COMPLEMENT_DESTINATAIRE_COORD_CORRESPONDANCE',
        'COMPLEMENT_POINT_GEOGRAPHIQUE_COORD_CORRESPONDANCE',
        'NUMERO_VOIE_COORD_CORRESPONDANCE',
        'INDICE_REPETITION_VOIE_COORD_CORRESPONDANCE',
        'CODE_TYPE_DE_VOIE_COORD_CORRESPONDANCE',
        'LIBELLE_TYPE_DE_VOIE_COORD_CORRESPONDANCE',
        'LIBELLE_VOIE_COORD_CORRESPONDANCE',
        'MENTION_DISTRIBUTION_COORD_CORRESPONDANCE',
        'BUREAU_CEDEX_COORD_CORRESPONDANCE',
        'CODE_POSTAL_COORD_CORRESPONDANCE',
        'CODE_COMMUNE_COORD_CORRESPONDANCE',
        'LIBELLE_COMMUNE_COORD_CORRESPONDANCE',
        'CODE_PAYS_COORD_CORRESPONDANCE',
        'LIBELLE_PAYS_COORD_CORRESPONDANCE',
        'TELEPHONE_COORD_CORRESPONDANCE',
        'TELEPHONE_2_COORD_CORRESPONDANCE',
        'TELECOPIE_COORD_CORRESPONDANCE',
        'ADRESSE_EMAIL_COORD_CORRESPONDANCE',
        'DATE_DE_MISE_A_JOUR_COORD_CORRESPONDANCE',
        'DATE_DE_FIN_COORD_CORRESPONDANCE',
        'UNNAMED'
        )
    elif file_name == "COORDSTRUCT":
        column_names = (
        'IDENTIFIANT_TECHNIQUE_DE_LA_STRUCTURE',
        'COMPLEMENT_DESTINATAIRE_COORD_STRUCTURE',
        'COMPLEMENT_POINT_GEOGRAPHIQUE_COORD_STRUCTURE',
        'NUMERO_VOIE_COORD_STRUCTURE',
        'INDICE_REPETITION_VOIE_COORD_STRUCTURE',
        'CODE_TYPE_DE_VOIE_COORD_STRUCTURE',
        'LIBELLE_TYPE_DE_VOIE_COORD_STRUCTURE',
        'LIBELLE_VOIE_COORD_STRUCTURE',
        'MENTION_DISTRIBUTION_COORD_STRUCTURE',
        'BUREAU_CEDEX_COORD_STRUCTURE',
        'CODE_POSTAL_COORD_STRUCTURE',
        'CODE_COMMUNE_COORD_STRUCTURE',
        'LIBELLE_COMMUNE_COORD_STRUCTURE',
        'CODE_PAYS_COORD_STRUCTURE',
        'LIBELLE_PAYS_COORD_STRUCTURE',
        'TELEPHONE_COORD_STRUCTURE',
        'TELEPHONE_2_COORD_STRUCTURE',
        'TELECOPIE_COORD_STRUCTURE',
        'ADRESSE_EMAIL_COORD_STRUCTURE',
        'DATE_DE_MISE_A_JOUR_COORD_STRUCTURE',
        'DATE_DE_FIN_COORD_STRUCTURE',
        'UNNAMED'
        )
    elif file_name == "DIPLOBT":
        column_names = (
        'TYPE_D_IDENTIFIANT_PP',
        'IDENTIFIANT_PP',
        'IDENTIFICATION_NATIONALE_PP',
        'CODE_TYPE_DIPLOME_OBTENU',
        'LIBELLE_TYPE_DIPLOME_OBTENU',
        'CODE_DIPLOME_OBTENU',
        'LIBELLE_DIPLOME_OBTENU',
        'DATE_DE_MISE_A_JOUR_DIPLOME_OBTENU',
        'CODE_LIEU_OBTENTION',
        'LIBELLE_LIEU_OBTENTION',
        'DATE_D_OBTENTION_DIPLOME',
        'NUMERO_DIPLOME',
        'UNNAMED'
        )
    elif file_name == "ETATCIV":
        column_names = (
        'TYPE_D_IDENTIFIANT_PP',
        'IDENTIFIANT_PP',
        'IDENTIFICATION_NATIONALE_PP',
        'CODE_STATUT_ETAT_CIVIL',
        'LIBELLE_STATUT_ETAT_CIVIL',
        'CODE_SEXE',
        'LIBELLE_SEXE',
        'NOM_DE_FAMILLE',
        'PRENOMS',
        'DATE_DE_NAISSANCE',
        'LIEU_DE_NAISSANCE',
        'DATE_DE_DECES',
        'DATE_D_EFFET_DE_L_ETAT_CIVIL',
        'CODE_COMMUNE_DE_NAISSANCE',
        'LIBELLE_COMMUNE_DE_NAISSANCE',
        'CODE_PAYS_DE_NAISSANCE',
        'LIBELLE_PAYS_DE_NAISSANCE',
        'DATE_DE_MISE_A_JOUR_ETAT_CIVIL',
        'UNNAMED'
        )
    elif file_name == "EXERCPRO":
        column_names = (
        'TYPE_D_IDENTIFIANT_PP',
        'IDENTIFIANT_PP',
        'IDENTIFICATION_NATIONALE_PP',
        'CODE_CIVILITE_D_EXERCICE',
        'LIBELLE_CIVILITE_D_EXERCICE',
        'NOM_D_EXERCICE',
        'PRENOM_D_EXERCICE',
        'CODE_PROFESSION',
        'LIBELLE_PROFESSION',
        'CODE_CATEGORIE_PROFESSIONNELLE',
        'LIBELLE_CATEGORIE_PROFESSIONNELLE',
        'DATE_DE_FIN_EXERCICE',
        'DATE_DE_MISE_A_JOUR_EXERCICE',
        'DATE_EFFET_EXERCICE',
        'CODE_AE_1E_INSCRIPTION',
        'LIBELLE_AE_1E_INSCRIPTION',
        'DATE_DEBUT_1E_INSCRIPTION',
        'DEPARTEMENT_1E_INSCRIPTION',
        'LIBELLE_DEPARTEMENT_1E_INSCRIPTION',
        'UNNAMED'
        )
    elif file_name == "REFERAE":
        column_names = (
        'TYPE_D_IDENTIFIANT_PP',
        'IDENTIFIANT_PP',
        'IDENTIFICATION_NATIONALE_PP',
        'CODE_AE',
        'LIBELLE_AE',
        'DATE_DEBUT_INSCRIPTION',
        'DATE_FIN_INSCRIPTION',
        'DATE_DE_MISE_A_JOUR_INSCRIPTION',
        'CODE_STATUT_INSCRIPTION',
        'LIBELLE_STATUT_INSCRIPTION',
        'CODE_DEPARTEMENT_INSCRIPTION',
        'LIBELLE_DEPARTEMENT_INSCRIPTION',
        'CODE_DEPARTEMENT_ACCUEIL',
        'LIBELLE_DEPARTEMENT_ACCUEIL',
        'CODE_PROFESSION',
        'LIBELLE_PROFESSION',
        'CODE_CATEGORIE_PROFESSIONNELLE',
        'LIBELLE_CATEGORIE_PROFESSIONNELLE',
        'UNNAMED'
        )
    elif file_name == "SAVOIRFAIRE":
        column_names = (
        'TYPE_D_IDENTIFIANT_PP',
        'IDENTIFIANT_PP',
        'IDENTIFICATION_NATIONALE_PP',
        'CODE_SAVOIR_FAIRE',
        'LIBELLE_SAVOIR_FAIRE',
        'CODE_TYPE_SAVOIR_FAIRE',
        'LIBELLE_TYPE_SAVOIR_FAIRE',
        'CODE_PROFESSION',
        'LIBELLE_PROFESSION',
        'CODE_CATEGORIE_PROFESSIONNELLE',
        'LIBELLE_CATEGORIE_PROFESSIONNELLE',
        'DATE_RECONNAISSANCE_SAVOIR_FAIRE',
        'DATE_DE_MISE_A_JOUR_SAVOIR_FAIRE',
        'DATE_ABANDON_SAVOIR_FAIRE',
        'UNNAMED'
        )
    elif file_name == "STRUCTURE":
        column_names = (
        'TYPE_DE_STRUCTURE',
        'IDENTIFIANT_TECHNIQUE_DE_LA_STRUCTURE',
        'IDENTIFICATION_NATIONALE_DE_LA_STRUCTURE',
        'NUMERO_SIRET',
        'NUMERO_SIREN',
        'NUMERO_FINESS_ETABLISSEMENT',
        'NUMERO_FINESS_EJ',
        'RPPS_RANG',
        'ADELI_RANG',
        'NUMERO_LICENCE_OFFICINE',
        'DATE_D_OUVERTURE_STRUCTURE',
        'DATE_DE_FERMETURE_STRUCTURE',
        'DATE_DE_MISE_A_JOUR_STRUCTURE',
        'CODE_APE',
        'LIBELLE_APE',
        'CODE_CATEGORIE_JURIDIQUE',
        'LIBELLE_CATEGORIE_JURIDIQUE',
        'CODE_SECTEUR_D_ACTIVITE',
        'LIBELLE_SECTEUR_D_ACTIVITE',
        'RAISON_SOCIALE',
        'ENSEIGNE_COMMERCIALE',
        'UNNAMED'
        )

    return column_names, file_name

